name: Test All / build_and_test_android (pull_request)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  e2e-android:
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space
        run: |
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Shared Code Repo
        uses: actions/checkout@v4
        with:
          repository: juspay/hyperswitch-sdk-utils
          ref: main
          path: shared-code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: 'npm'
          # cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm install

      - name: Start server
        env:
          SONATYPE_TOKEN: ${{ secrets.ANDROID_SONATYPE_AUTH_TOKEN }}
          SELECTED_LIBRARIES: ${{ steps.extract-libs.outputs.libraries }}
          GPG_PASSPHRASE: ${{ secrets.ANDROID_GPG_SIGNING_KEY_PASSWORD }}
          SENTRY_DSN: ${{ secrets.HYPERSWITCH_SENTRY_DSN }}
          SENTRY_ENV: "production"
          HYPERSWITCH_PRODUCTION_URL: ${{ secrets.HYPERSWITCH_PRODUCTION_URL }}
          HYPERSWITCH_INTEG_URL: ${{ secrets.HYPERSWITCH_INTEG_URL }}
          HYPERSWITCH_SANDBOX_URL: ${{ secrets.HYPERSWITCH_SANDBOX_URL }}
          HYPERSWITCH_LOGS_PATH: ${{ secrets.HYPERSWITCH_LOGS_PATH }}
          PROD_ASSETS_END_POINT: ${{ secrets.PROD_ASSETS_END_POINT }}
          SANDBOX_ASSETS_END_POINT: ${{ secrets.SANDBOX_ASSETS_END_POINT }}
          INTEG_ASSETS_END_POINT: ${{ secrets.INTEG_ASSETS_END_POINT }}
          HYPERSWITCH_PUBLISHABLE_KEY: ${{ secrets.HYPERSWITCH_PUBLISHABLE_KEY }}
          HYPERSWITCH_SECRET_KEY: ${{ secrets.HYPERSWITCH_SECRET_KEY }}
          PROFILE_ID: ${{ secrets.PROFILE_ID }}
        run: |
          nohup node server.js &

      - name: Check Server
        run: |
          curl http://localhost:5252/create-payment-intent

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: 17

      # - name: Cache Detox build
      #   id: cache-detox-build
      #   uses: actions/cache@v3
      #   with:
      #     path: android/app/build
      #     key: ${{ runner.os }}-detox-build
      #     restore-keys: |
      #       ${{ runner.os }}-detox-build

      # - name: List branches
      #   run: |
      #     cd android
      #     git fetch --all
      #     git branch -r

      - name: Checkout Android Repo
        uses: actions/checkout@v4
        with:
          repository: juspay/hyperswitch-sdk-android
          ref: main
          path: android
          fetch-depth: 0

      - name: Generate DS Root Certificate for Netcetera SDK
        run: |
          CERTIFICATE_STRING=${{ secrets.NETCETERA_DS_ROOT_CRT }}
          OUTPUT_FILE="nca_demo_root.crt"
          mkdir -p android/demo-app/src/main/assets
          OUTPUT_PATH="android/demo-app/src/main/assets/$OUTPUT_FILE"
          {
            echo "-----BEGIN CERTIFICATE-----"
            echo "$CERTIFICATE_STRING"
            echo "-----END CERTIFICATE-----"
          } > "$OUTPUT_PATH"
          echo "Content has been successfully transferred to $OUTPUT_FILE."

      - name: Generate & Supply JS Bundle to Test APK
        run: |
          npm run re:start

      - name: Start Metro
        run: |
          nohup npm run start &

      - name: Make scripts executable
        run: |
          chmod +x setup-android-sdk.sh run-android-tests.sh

      - name: Setup Android SDK environment
        run: |
          source ./setup-android-sdk.sh
          echo "Android SDK setup complete at $ANDROID_HOME"

      - name: Create artifacts directory
        run: mkdir -p ./artifacts

      - name: Detox build
        run: npx detox build --configuration android.emu.ci.debug

      # Use multiple steps to ensure that even if the emulator/test step fails,
      # we still capture artifacts
      - name: Setup and Run Emulator with Tests
        id: run_tests
        continue-on-error: true
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          profile: pixel
          avd-name: test
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -no-cache
          script: |
            adb devices
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0

            # Create a logcat file for debugging
            adb logcat > ./artifacts/device_logcat.log &
            LOGCAT_PID=$!

            # Start detox server
            npx detox server &
            DETOX_SERVER_PID=$!

            # Wait for server to start
            sleep 5

            # Run tests
            mkdir -p ./artifacts/screenshots
            touch ./artifacts/test_output.log
            DETOX_DISABLE_REACT_NATIVE_UIMODULE_SYNCHRONIZATION=true DETOX_ARTIFACTS_LOCATION=./artifacts npx detox test --configuration android.emu.ci.debug --loglevel trace --record-logs all --take-screenshots all --debug-synchronization 10000 2>&1 | tee ./artifacts/test_output.log

            # Take a final screenshot regardless of test result
            adb shell screencap -p /sdcard/final_state.png
            adb pull /sdcard/final_state.png ./artifacts/final_state.png

            # Kill logcat process
            kill $LOGCAT_PID

            # Kill detox server
            kill $DETOX_SERVER_PID

      # Force artifact generation regardless of test outcome
      - name: Force create screenshot directory
        if: always()
        run: |
          mkdir -p ./artifacts/screenshots
          echo "Test run time: $(date)" > ./artifacts/run_info.txt
          echo "Test status: ${{ steps.run_tests.outcome }}" >> ./artifacts/run_info.txt

      - name: Capture device logs as backup
        if: always()
        continue-on-error: true
        run: |
          adb logcat -d > ./artifacts/final_device_log.log || echo "Could not capture final device log"
          adb shell dumpsys > ./artifacts/device_dumpsys.log || echo "Could not capture device dumpsys"

      - name: Generate summary of screenshots
        if: always()
        run: |
          echo "## Test Run Summary" > screenshots_summary.md
          echo "" >> screenshots_summary.md
          echo "Test outcome: ${{ steps.run_tests.outcome }}" >> screenshots_summary.md
          echo "" >> screenshots_summary.md
          echo "## Test Screenshots" >> screenshots_summary.md
          echo "" >> screenshots_summary.md
          if [ -d "./artifacts" ]; then
            find ./artifacts -name "*.png" | sort | while read file; do
              echo "- $(basename $file)" >> screenshots_summary.md
            done
          else
            echo "No screenshots found." >> screenshots_summary.md
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: detox-artifacts
          path: |
            ./artifacts
          retention-days: 7

      - name: Upload screenshots summary
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-summary
          path: screenshots_summary.md
          retention-days: 7

      # Set job status based on test outcome
      - name: Set job status
        if: steps.run_tests.outcome == 'failure'
        run: exit 1
