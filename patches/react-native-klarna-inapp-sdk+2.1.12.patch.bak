diff --git a/node_modules/react-native-klarna-inapp-sdk/index.web.js b/node_modules/react-native-klarna-inapp-sdk/index.web.js
new file mode 100644
index 0000000..9214091
--- /dev/null
+++ b/node_modules/react-native-klarna-inapp-sdk/index.web.js
@@ -0,0 +1,74 @@
+import React, {Component}from 'react';
+import { UIManager, findNodeHandle, View } from 'react-native';
+import PropTypes from 'prop-types';
+
+class KlarnaReactPaymentView extends Component {
+
+    render() {
+        return <KlarnaPaymentView {...this.props} />
+    }
+
+    initialize = (sessionToken, returnUrl) => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.initialize,
+            [sessionToken, returnUrl]
+        )
+    }
+
+    load = (sessionData) => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.load,
+            [sessionData || null]
+        )
+    }
+
+    loadPaymentReview = () => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.loadPaymentReview,
+            []
+        )
+    }
+
+    authorize = (autoFinalize, sessionData) => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.authorize,
+            [autoFinalize || true, sessionData || null]
+        )
+    }
+
+    reauthorize = (sessionData) => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.reauthorize,
+            [sessionData || null]
+        )
+    }
+
+    finalize = (sessionData) => {
+        UIManager.dispatchViewManagerCommand(
+            findNodeHandle(this),
+            UIManager.getViewManagerConfig('KlarnaPaymentView').Commands.finalize,
+            [sessionData || null]
+        )
+    }
+}
+
+KlarnaReactPaymentView.propTypes = {
+    category: PropTypes.string,
+    onInitialized: PropTypes.func,
+    onLoaded: PropTypes.func,
+    onAuthorized: PropTypes.func,
+    onReauthorized: PropTypes.func,
+    onFinalized: PropTypes.func,
+    onError: PropTypes.func,
+}
+
+const KlarnaPaymentView = () => {
+    return React.null
+};
+
+export default KlarnaReactPaymentView;
