#!/bin/bash

# Exit immediately if any command fails
set -e

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_success() {
    print_status "$GREEN" "✅ $1"
}

print_error() {
    print_status "$RED" "❌ $1"
}

print_info() {
    print_status "$BLUE" "ℹ️  $1"
}

print_warning() {
    print_status "$YELLOW" "⚠️  $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Function to install gitleaks based on OS
install_gitleaks() {
    print_info "Installing gitleaks..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command_exists brew; then
            brew install gitleaks
        else
            print_error "Homebrew not found. Please install gitleaks manually."
            exit 1
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux - try different package managers
        if command_exists apt; then
            sudo apt update && sudo apt install -y gitleaks
        elif command_exists yum; then
            sudo yum install -y gitleaks
        elif command_exists pacman; then
            sudo pacman -S gitleaks
        else
            print_warning "No supported package manager found. Attempting to install via go..."
            if command_exists go; then
                go install github.com/zricethezav/gitleaks/v8@latest
            else
                print_error "Please install gitleaks manually from: https://github.com/zricethezav/gitleaks"
                exit 1
            fi
        fi
    else
        print_error "Unsupported OS. Please install gitleaks manually."
        exit 1
    fi
}

# Function to run gitleaks scan
run_gitleaks_scan() {
    local directory=$1
    local name=$2
    local current_dir=$(pwd)
    local config_file=""
    print_info "Scanning $name for secrets..."
    if [[ -d "$directory" ]]; then
        if [[ "$directory" != "." ]]; then
            config_file="--config=$current_dir/.gitleaks.toml"
        fi
        cd "$directory" || {
            print_error "Failed to change to directory: $directory"
            exit 1
        }
        
        if gitleaks detect --source . --no-banner $config_file 2>/dev/null; then
            print_success "$name: No secrets found"
        else
            print_error "$name: Secrets detected!"
            print_info "Running verbose scan for details..."
            gitleaks detect --source . --verbose --no-banner $config_file
            cd "$current_dir"
            exit 1
        fi
        
        cd "$current_dir" || {
            print_error "Failed to return to original directory"
            exit 1
        }
    else
        print_warning "$name directory not found, skipping..."
    fi
}

# Main script execution
main() {
    print_info "Starting ReScript and Security checks..."
    echo
    
    # ReScript compilation check
    print_info "ReScript Lint Check"
    
    if npm run re:check; then
        print_success "ReScript compilation successful!"
    else
        print_error "ReScript compilation failed!"
        exit 1
    fi
    
    echo
    
    # GitLeaks installation check
    if ! command_exists gitleaks; then
        print_warning "gitleaks not found"
        install_gitleaks
        print_success "gitleaks installed successfully"
    else
        print_success "gitleaks is already installed"
    fi
    
    echo
    
    # Store original directory
    ORIGINAL_DIR=$(pwd)
    
    # Security scans for different components
    print_info "🔍 Running security scans..."
    echo
    
    # Scan main directory (Client Core)
    run_gitleaks_scan "." "Client Core"
    
    # Scan subdirectories
    run_gitleaks_scan "shared-code" "Shared Code"
    run_gitleaks_scan "android" "Android"
    run_gitleaks_scan "ios" "iOS"
    
    echo
    print_success "All checks completed successfully! 🎉"
}

# Trap to ensure we return to original directory on exit
trap 'cd "$ORIGINAL_DIR" 2>/dev/null || true' EXIT

# Run main function
main "$@"